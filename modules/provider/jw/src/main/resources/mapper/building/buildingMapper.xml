<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yice.edu.cn.jw.dao.building.IBuildingDao">
    <!--########################################################generated code start,do not update################################################################-->
    <sql id="projection">
        <choose>
             <when test="pager!=null and pager.includes!=null">
                 <foreach collection="pager.includes" item="field" separator=",">
                     T.${@cn.hutool.core.util.StrUtil@toUnderlineCase(field)}
                 </foreach>
             </when>
             <when test="pager!=null and pager.excludes!=null">
                 <trim suffixOverrides=",">
                         <if test="!pager.excludes.contains('id')">
                             T.id,
                         </if>
                         <if test="!pager.excludes.contains('sortNum')">
                             T.sort_num,
                         </if>
                         <if test="!pager.excludes.contains('name')">
                             T.name,
                         </if>
                         <if test="!pager.excludes.contains('createTime')">
                             T.create_time,
                         </if>
                         <if test="!pager.excludes.contains('updateTime')">
                             T.update_time,
                         </if>
                         <if test="!pager.excludes.contains('schoolId')">
                             T.school_id,
                         </if>
                         <if test="!pager.excludes.contains('capacity')">
                             T.capacity,
                         </if>
                         <if test="!pager.excludes.contains('typeId')">
                             T.type_id,
                         </if>
                         <if test="!pager.excludes.contains('level')">
                             T.level,
                         </if>
                         <if test="!pager.excludes.contains('parentId')">
                             T.parent_id,
                         </if>
                 </trim>
             </when>
             <otherwise>
                 T.*
             </otherwise>
         </choose>
    </sql>
    <sql id="match">
        <where>
              <if test="id!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='id'">
                             T.id like concat('%',#{id},'%')
                         </when>
                         <otherwise>
                             T.id=#{id}
                         </otherwise>
                      </choose>
              </if>
              <if test="sortNum!=null">
                    and T.sort_num=#{sortNum}
              </if>
              <if test="name!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='name'">
                            and T.name like concat('%',#{name},'%')
                         </when>
                         <otherwise>
                            and T.name=#{name}
                         </otherwise>
                      </choose>
              </if>
              <if test="createTime!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='createTime'">
                            and T.create_time like concat('%',#{createTime},'%')
                         </when>
                         <otherwise>
                            and T.create_time=#{createTime}
                         </otherwise>
                      </choose>
              </if>
              <if test="updateTime!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='updateTime'">
                            and T.update_time like concat('%',#{updateTime},'%')
                         </when>
                         <otherwise>
                            and T.update_time=#{updateTime}
                         </otherwise>
                      </choose>
              </if>
              <if test="schoolId!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='schoolId'">
                            and T.school_id like concat('%',#{schoolId},'%')
                         </when>
                         <otherwise>
                            and T.school_id=#{schoolId}
                         </otherwise>
                      </choose>
              </if>
              <if test="capacity!=null">
                    and T.capacity=#{capacity}
              </if>
              <if test="typeId!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='typeId'">
                            and T.type_id like concat('%',#{typeId},'%')
                         </when>
                         <otherwise>
                            and T.type_id=#{typeId}
                         </otherwise>
                      </choose>
              </if>
              <if test="level!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='level'">
                            and T.level like concat('%',#{level},'%')
                         </when>
                         <otherwise>
                            and T.level=#{level}
                         </otherwise>
                      </choose>
              </if>
              <if test="parentId!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='parentId'">
                            and T.parent_id like concat('%',#{parentId},'%')
                         </when>
                         <otherwise>
                            and T.parent_id=#{parentId}
                         </otherwise>
                      </choose>
              </if>
            <if test="pager!=null and pager.rangeField!=null and pager.rangeArray!=null and pager.rangeArray.length==2">
                <foreach collection="pager.rangeArray" item="item"  index="i">
                    <if test="i==0 and item!=null">
                        and ${@cn.hutool.core.util.StrUtil@toUnderlineCase(pager.rangeField)} &gt;= #{item}
                    </if>
                    <if test="i==1 and item!=null">
                        and ${@cn.hutool.core.util.StrUtil@toUnderlineCase(pager.rangeField)} &lt;= #{item}
                    </if>
                </foreach>

            </if>
        </where>
    </sql>
    <sql id="sort">
        <if test="pager!=null and pager.sortField!=null and pager.sortOrder!=null">
            order by
            <foreach collection="pager.sortField.split(',')" item="s" index="i" separator=",">
                T.${@cn.hutool.core.util.StrUtil@toUnderlineCase(s)} ${pager.sortOrder.split(',')[i]}
            </foreach>
        </if>
    </sql>
    <sql id="page">
        <if test="pager!=null and  pager.paging">
            limit #{pager.beginRow},#{pager.pageSize}
        </if>
    </sql>


    <select id="findBuildingListByCondition" parameterType="Building" resultType="Building">
        select
         D.name as typeName,
         <include refid="projection"/>
         from jw_building T left join ad_dd D on T.type_id=D.id
         <include refid="match"/>
         <include refid="sort"/>
         <include refid="page"/>


    </select>
    <select id="findBuildingCountByCondition" parameterType="Building" resultType="long">
        select count(*) from jw_building T
        <include refid="match"/>
    </select>
    <select id="findBuildingById" resultType="Building">
        select * from jw_building where id=#{id}
    </select>
    <select id="findOneBuildingByCondition" parameterType="Building" resultType="Building">
        select
         <include refid="projection"/>
         from jw_building T
        <include refid="match"/>
    </select>
    <insert id="saveBuilding" parameterType="Building">
        insert into jw_building
         (
            id,
            sort_num,
            name,
            create_time,
            update_time,
            school_id,
            capacity,
            type_id,
            level,
            parent_id,
            floors
        ) values
         (
                #{id}
                ,
                #{sortNum}
                ,
                #{name}
                ,
                now()
                ,
                #{updateTime}
                ,
                #{schoolId}
                ,
                #{capacity}
                ,
                #{typeId}
                ,
                #{level}
                ,
                #{parentId}
                ,
                #{floors}
         )
    </insert>
    <update id="updateBuilding" parameterType="Building">
        update jw_building
        <set>
            <if test="name!=null ">
                name=#{name},
            </if>


            <if test="capacity!=null ">
                capacity=#{capacity},
            </if>

            <if test="typeId!=null ">
                type_id=#{typeId},
            </if>
            <if test="floors!=null ">
                floors=#{floors},
            </if>
            update_time=now()
        </set>
         where id=#{id}
    </update>
    <delete id="deleteBuilding" >
        delete from jw_building where id=#{id}
    </delete>
    <delete id="deleteBuildingByCondition" >
        delete T from jw_building T
        <include refid="match"/>
    </delete>
    <insert id="batchSaveBuilding" parameterType="Building">
        INSERT INTO jw_building (  id,  sort_num,  name,  create_time,  update_time,  school_id,  capacity,  type_id,  level,  parent_id )
        VALUES
        <foreach collection="list" item="building" separator=",">
            (  #{building.id},  #{building.sortNum},  #{building.name},  #{building.createTime},  #{building.updateTime},  #{building.schoolId},  #{building.capacity},  #{building.typeId},  #{building.level},  #{building.parentId}  )
        </foreach>
    </insert>
    <!--##################################################generated code end,do not update######################################################################-->

    <select id="findSchoolNumberRooms" resultType="com.yice.edu.cn.common.pojo.jw.building.Building">
        select id,name from jw_building where school_id=#{schoolId} and (type_id='102' or type_id='105')
    </select>


    <select id="findSpaceListCountOfType" parameterType="String" resultType="SpaceOfType">
      SELECT
	count( b.id ) type_num,
	a.NAME type_name
  FROM
	( SELECT * FROM ad_dd WHERE type_id = '10' ) a
	LEFT JOIN jw_building b ON b.type_id = a.id
	AND b.school_id = #{schoolId}
  GROUP BY
	a.id,
	a.NAME
    </select>


    <select id="findBuildingRoomNameAll" parameterType="Building" resultType="Building">
        SELECT * FROM jw_building
        WHERE school_id = #{schoolId}
        <if test="floorIdStr!=null">
            and parent_id  in
            <foreach collection="floorIdStr" open="(" close=")" separator="," index="index" item="item">
                #{item, jdbcType=VARCHAR}
            </foreach>
        </if>


    </select>


    <select id="findBuildingListByParentIds" parameterType="String" resultType="String">
        select * from jw_building where parent_id in
        (
        <foreach collection="list" separator="," item="id">
            #{id}
        </foreach>

        )
    </select>

</mapper>