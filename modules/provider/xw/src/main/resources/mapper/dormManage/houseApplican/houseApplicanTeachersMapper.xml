<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yice.edu.cn.xw.dao.dormManage.houseApplican.IHouseApplicanTeachersDao">
    <!--########################################################generated code start,do not update################################################################-->
    <sql id="projection">
        <choose>
             <when test="pager!=null and pager.includes!=null">
                 <foreach collection="pager.includes" item="field" separator=",">
                     T.${@cn.hutool.core.util.StrUtil@toUnderlineCase(field)}
                 </foreach>
             </when>
             <when test="pager!=null and pager.excludes!=null">
                 <trim suffixOverrides=",">
                         <if test="!pager.excludes.contains('id')">
                             T.id,
                         </if>
                         <if test="!pager.excludes.contains('schoolId')">
                             T.school_id,
                         </if>
                         <if test="!pager.excludes.contains('createTime')">
                             T.create_time,
                         </if>
                         <if test="!pager.excludes.contains('houseApplicanId')">
                             T.house_applican_id,
                         </if>
                         <if test="!pager.excludes.contains('teacherId')">
                             T.teacher_id,
                         </if>
                         <if test="!pager.excludes.contains('sort')">
                             T.sort,
                         </if>
                         <if test="!pager.excludes.contains('nextSort')">
                             T.next_sort,
                         </if>
                         <if test="!pager.excludes.contains('remark')">
                             T.remark,
                         </if>
                         <if test="!pager.excludes.contains('throughTime')">
                             T.through_time,
                         </if>
                         <if test="!pager.excludes.contains('status')">
                             T.status,
                         </if>
                         <if test="!pager.excludes.contains('type')">
                             T.type,
                         </if>
                 </trim>
             </when>
             <otherwise>
                 T.*
             </otherwise>
         </choose>
    </sql>
    <sql id="match">
        <where>
              <if test="id!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='id'">
                             T.id like concat('%',#{id},'%')
                         </when>
                         <otherwise>
                             T.id=#{id}
                         </otherwise>
                      </choose>
              </if>
              <if test="schoolId!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='schoolId'">
                            and T.school_id like concat('%',#{schoolId},'%')
                         </when>
                         <otherwise>
                            and T.school_id=#{schoolId}
                         </otherwise>
                      </choose>
              </if>
              <if test="createTime!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='createTime'">
                            and T.create_time like concat('%',#{createTime},'%')
                         </when>
                         <otherwise>
                            and T.create_time=#{createTime}
                         </otherwise>
                      </choose>
              </if>
              <if test="houseApplicanId!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='houseApplicanId'">
                            and T.house_applican_id like concat('%',#{houseApplicanId},'%')
                         </when>
                         <otherwise>
                            and T.house_applican_id=#{houseApplicanId}
                         </otherwise>
                      </choose>
              </if>
              <if test="teacherId!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='teacherId'">
                            and T.teacher_id like concat('%',#{teacherId},'%')
                         </when>
                         <otherwise>
                            and T.teacher_id=#{teacherId}
                         </otherwise>
                      </choose>
              </if>
              <if test="sort!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='sort'">
                            and T.sort like concat('%',#{sort},'%')
                         </when>
                         <otherwise>
                            and T.sort=#{sort}
                         </otherwise>
                      </choose>
              </if>
              <if test="nextSort!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='nextSort'">
                            and T.next_sort like concat('%',#{nextSort},'%')
                         </when>
                         <otherwise>
                            and T.next_sort=#{nextSort}
                         </otherwise>
                      </choose>
              </if>
              <if test="remark!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='remark'">
                            and T.remark like concat('%',#{remark},'%')
                         </when>
                         <otherwise>
                            and T.remark=#{remark}
                         </otherwise>
                      </choose>
              </if>
              <if test="throughTime!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='throughTime'">
                            and T.through_time like concat('%',#{throughTime},'%')
                         </when>
                         <otherwise>
                            and T.through_time=#{throughTime}
                         </otherwise>
                      </choose>
              </if>
              <if test="status!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='status'">
                            and T.status like concat('%',#{status},'%')
                         </when>
                         <otherwise>
                            and T.status=#{status}
                         </otherwise>
                      </choose>
              </if>
              <if test="type!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='type'">
                            and T.type like concat('%',#{type},'%')
                         </when>
                         <otherwise>
                            and T.type=#{type}
                         </otherwise>
                      </choose>
              </if>
            <if test="pager!=null and pager.rangeField!=null and pager.rangeArray!=null and pager.rangeArray.length==2">
                <foreach collection="pager.rangeArray" item="item"  index="i">
                    <if test="i==0 and item!=null">
                        and ${@cn.hutool.core.util.StrUtil@toUnderlineCase(pager.rangeField)} &gt;= #{item}
                    </if>
                    <if test="i==1 and item!=null">
                        and ${@cn.hutool.core.util.StrUtil@toUnderlineCase(pager.rangeField)} &lt;= #{item}
                    </if>
                </foreach>

            </if>
        </where>
    </sql>
    <sql id="sort">
        <if test="pager!=null and pager.sortField!=null and pager.sortOrder!=null">
            order by
            <foreach collection="pager.sortField.split(',')" item="s" index="i" separator=",">
                T.${@cn.hutool.core.util.StrUtil@toUnderlineCase(s)} ${pager.sortOrder.split(',')[i]}
            </foreach>
        </if>
    </sql>
    <sql id="page">
        <if test="pager!=null and  pager.paging">
            limit #{pager.beginRow},#{pager.pageSize}
        </if>
    </sql>


    <select id="findHouseApplicanTeachersListByCondition" parameterType="HouseApplicanTeachers" resultType="HouseApplicanTeachers">
        select
         <include refid="projection"/>
         from xw_house_applican_teachers T
         <include refid="match"/>
         <include refid="sort"/>
         <include refid="page"/>


    </select>
    <select id="findHouseApplicanTeachersCountByCondition" parameterType="HouseApplicanTeachers" resultType="long">
        select count(*) from xw_house_applican_teachers T
        <include refid="match"/>
    </select>
    <select id="findHouseApplicanTeachersById" resultType="HouseApplicanTeachers">
        select * from xw_house_applican_teachers where id=#{id}
    </select>
    <select id="findOneHouseApplicanTeachersByCondition" parameterType="HouseApplicanTeachers" resultType="HouseApplicanTeachers">
        select
         <include refid="projection"/>
         from xw_house_applican_teachers T
        <include refid="match"/>
    </select>
    <insert id="saveHouseApplicanTeachers" parameterType="HouseApplicanTeachers">
        insert into xw_house_applican_teachers
         (
            id,
            school_id,
            create_time,
            house_applican_id,
            teacher_id,
            sort,
            next_sort,
            remark,
            through_time,
            status,
            type
        ) values
         (
                #{id}
                ,
                #{schoolId}
                ,
                now()
                ,
                #{houseApplicanId}
                ,
                #{teacherId}
                ,
                #{sort}
                ,
                #{nextSort}
                ,
                #{remark}
                ,
                #{throughTime}
                ,
                #{status}
                ,
                #{type}
                
         )
    </insert>
    <update id="updateHouseApplicanTeachers" parameterType="HouseApplicanTeachers">
        update xw_house_applican_teachers
        <set>
                    <if test="schoolId!=null ">
                        school_id=#{schoolId},
                    </if>
                    <if test="createTime!=null ">
                        create_time=#{createTime},
                    </if>
                    <if test="houseApplicanId!=null ">
                        house_applican_id=#{houseApplicanId},
                    </if>
                    <if test="teacherId!=null ">
                        teacher_id=#{teacherId},
                    </if>
                    <if test="sort!=null ">
                        sort=#{sort},
                    </if>
                    <if test="nextSort!=null ">
                        next_sort=#{nextSort},
                    </if>
                    <if test="remark!=null ">
                        remark=#{remark},
                    </if>

                        through_time=now(),

                    <if test="status!=null ">
                        status=#{status},
                    </if>
                    <if test="type!=null ">
                        type=#{type}
                    </if>
          </set>
         where id=#{id}
    </update>
    <delete id="deleteHouseApplicanTeachers" >
        delete from xw_house_applican_teachers where id=#{id}
    </delete>
    <delete id="deleteHouseApplicanTeachersByCondition" >
        delete T from xw_house_applican_teachers T
        <include refid="match"/>
    </delete>
    <insert id="batchSaveHouseApplicanTeachers" parameterType="HouseApplicanTeachers">
        INSERT INTO xw_house_applican_teachers (  id,  school_id,  create_time,  house_applican_id,  teacher_id,  sort,  next_sort,  remark,  through_time,  status,  type )
        VALUES
        <foreach collection="list" item="houseApplicanTeachers" separator=",">
            (  #{houseApplicanTeachers.id},  #{houseApplicanTeachers.schoolId},  #{houseApplicanTeachers.createTime},  #{houseApplicanTeachers.houseApplicanId},  #{houseApplicanTeachers.teacherId},  #{houseApplicanTeachers.sort},  #{houseApplicanTeachers.nextSort},  #{houseApplicanTeachers.remark},  #{houseApplicanTeachers.throughTime},  #{houseApplicanTeachers.status},  #{houseApplicanTeachers.type}  )
        </foreach>
    </insert>
    <!--##################################################generated code end,do not update######################################################################-->


    <update id="updateHouseApplicanTeachers1" parameterType="HouseApplicanTeachers">
        update xw_house_applican_teachers
        <set>
                through_time= now() ,
            <if test="remark!=null ">
                remark=#{remark},
            </if>


            <if test="status!=null ">
                status=#{status},
            </if>
        </set>
        where house_applican_id=#{houseApplicanId} and school_id=#{schoolId}
    </update>
</mapper>