<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yice.edu.cn.dm.dao.wb.groupManage.IStudentGroupDao">
    <!--########################################################generated code start,do not update################################################################-->
    <sql id="projection">
        <choose>
             <when test="pager!=null and pager.includes!=null">
                 <foreach collection="pager.includes" item="field" separator=",">
                     T.${@cn.hutool.core.util.StrUtil@toUnderlineCase(field)}
                 </foreach>
             </when>
             <when test="pager!=null and pager.excludes!=null">
                 <trim suffixOverrides=",">
                     <if test="!pager.excludes.contains('id')">
                         T.id,
                     </if>
                     <if test="!pager.excludes.contains('studentId')">
                         T.student_id,
                     </if>
                     <if test="!pager.excludes.contains('groupId')">
                         T.group_id,
                     </if>
                     <if test="!pager.excludes.contains('classesId')">
                         T.classes_id,
                     </if>
                     <if test="!pager.excludes.contains('schoolId')">
                         T.school_id,
                     </if>
                     <if test="!pager.excludes.contains('createTime')">
                         T.create_time,
                     </if>
                 </trim>
             </when>
             <otherwise>
                 T.*
             </otherwise>
         </choose>
    </sql>
    <sql id="match">
        <where>
              <if test="id!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='id'">
                             T.id like concat('%',#{id},'%')
                         </when>
                         <otherwise>
                             T.id=#{id}
                         </otherwise>
                      </choose>
              </if>
              <if test="studentId!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='studentId'">
                            and T.student_id like concat('%',#{studentId},'%')
                         </when>
                         <otherwise>
                            and T.student_id=#{studentId}
                         </otherwise>
                      </choose>
              </if>
              <if test="groupId!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='groupId'">
                            and T.group_id like concat('%',#{groupId},'%')
                         </when>
                         <otherwise>
                            and T.group_id=#{groupId}
                         </otherwise>
                      </choose>
              </if>
              <if test="classesId!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='classesId'">
                            and T.classes_id like concat('%',#{classesId},'%')
                         </when>
                         <otherwise>
                            and T.classes_id=#{classesId}
                         </otherwise>
                      </choose>
              </if>
            <if test="schoolId!=null">
                <choose>
                    <when test="pager!=null and pager.like=='schoolId'">
                        and T.school_id like concat('%',#{schoolId},'%')
                    </when>
                    <otherwise>
                        and T.school_id=#{schoolId}
                    </otherwise>
                </choose>
            </if>
            <if test="createTime!=null">
                <choose>
                    <when test="pager!=null and pager.like=='createTime'">
                        and T.create_time like concat('%',#{createTime},'%')
                    </when>
                    <otherwise>
                        and T.create_time=#{createTime}
                    </otherwise>
                </choose>
            </if>
            <if test="pager!=null and pager.rangeField!=null and pager.rangeArray!=null and pager.rangeArray.length==2">
                <foreach collection="pager.rangeArray" item="item"  index="i">
                    <if test="i==0 and item!=null">
                        and ${@cn.hutool.core.util.StrUtil@toUnderlineCase(pager.rangeField)} &gt;= #{item}
                    </if>
                    <if test="i==1 and item!=null">
                        and ${@cn.hutool.core.util.StrUtil@toUnderlineCase(pager.rangeField)} &lt;= #{item}
                    </if>
                </foreach>

            </if>
        </where>
    </sql>
    <sql id="sort">
        <if test="pager!=null and pager.sortField!=null and pager.sortOrder!=null">
            order by
            <foreach collection="pager.sortField.split(',')" item="s" index="i" separator=",">
                T.${@cn.hutool.core.util.StrUtil@toUnderlineCase(s)} ${pager.sortOrder.split(',')[i]}
            </foreach>
        </if>
    </sql>
    <sql id="page">
        <if test="pager!=null and  pager.paging">
            limit #{pager.beginRow},#{pager.pageSize}
        </if>
    </sql>


    <select id="findStudentGroupListByCondition" parameterType="StudentGroup" resultType="StudentGroup">
        select
         <include refid="projection"/>
         from student_group T
         <include refid="match"/>
         <include refid="sort"/>
         <include refid="page"/>


    </select>
    <select id="findStudentGroupCountByCondition" parameterType="StudentGroup" resultType="long">
        select count(*) from student_group T
        <include refid="match"/>
    </select>
    <select id="findStudentGroupById" resultType="StudentGroup">
        select * from student_group where id=#{id}
    </select>
    <select id="findOneStudentGroupByCondition" parameterType="StudentGroup" resultType="StudentGroup">
        select
         <include refid="projection"/>
         from student_group T
        <include refid="match"/>
    </select>
    <insert id="saveStudentGroup" parameterType="StudentGroup">
        insert into student_group
         (
            id,
            student_id,
            group_id,
            classes_id,
            school_id,
            create_time
        ) values
         (
            #{id}
            ,
            #{studentId}
            ,
            #{groupId}
            ,
            #{classesId}
            ,
            #{schoolId}
            ,
            #{createTime}
         )
    </insert>
    <update id="updateStudentGroup" parameterType="StudentGroup">
        update student_group
        <set>
            <if test="studentId!=null ">
                student_id=#{studentId},
            </if>
            <if test="groupId!=null ">
                group_id=#{groupId},
            </if>
            <if test="classesId!=null ">
                classes_id=#{classesId},
            </if>
            <if test="schoolId!=null ">
                school_id=#{schoolId},
            </if>
            <if test="createTime!=null ">
                create_time=#{createTime}
            </if>
          </set>
         where id=#{id}
    </update>
    <delete id="deleteStudentGroup" >
        delete from student_group where id=#{id}
    </delete>
    <delete id="deleteStudentGroupByCondition" >
        delete T from student_group T
        <include refid="match"/>
    </delete>
    <insert id="batchSaveStudentGroup" parameterType="StudentGroup">
        INSERT INTO student_group (id, student_id, group_id, classes_id, school_id, create_time)
        VALUES
        <foreach collection="list" item="studentGroup" separator=",">
            ( #{studentGroup.id}, #{studentGroup.studentId}, #{studentGroup.groupId}, #{studentGroup.classesId},
            #{studentGroup.schoolId}, #{studentGroup.createTime} )
        </foreach>
    </insert>
    <delete id="deleteStudentGroupByGroupId" parameterType="string">
        delete from student_group where group_id=#{groupId}
    </delete>
    <select id="findStudentGroupByGroupId" resultType="com.yice.edu.cn.common.pojo.wb.groupManage.StudentGroup">
        select t2.id,t2.name from student_group t1 LEFT JOIN jw_student t2 on t1.student_id=t2.id where t1.group_id=#{groupId}
    </select>
    <delete id="deleteStudentGroupByClassIds">
        delete from student_group where classes_id in
        <foreach collection="list" open="(" separator="," item="classesId" close=")">
            #{classesId}
        </foreach>
    </delete>
    <!--##################################################generated code end,do not update######################################################################-->
</mapper>